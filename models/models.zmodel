enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                   String                @id @default(uuid())
    name                 String?
    email                String?               @unique
    pictureUrl           String?               @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation      String?

    status               UserStatus            @default(VERIFIED)

    // this is the role of the user for the application
    globalRole           String                @default('USER')
    password             String?               @password @omit
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt @default(now())

    organizationRoles    OrganizationRole[]

    pwaSubscriptions     PwaSubscription[]     @relation("user")

    brokerConnections    BrokerConnection[]    @relation("user")
    tradingSetups        TradingSetup[]        @relation("user")
    trades               Trade[]               @relation("user")
    notificationSettings NotificationSetting[] @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model BrokerConnection {

    id             String        @id @default(uuid())
    login          String        @default('')
    password       String?       @password @omit
    server         String        @default('')
    exchangeName   String
    defaultLotSize String
    status         String

    userId         String
    user           User?         @relation(fields: [userId], references: [id], name: "user")
    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model TradingSetup {

    id              String        @id @default(uuid())
    emaShort        Float
    emaLong         Float
    rsiPeriod       Float
    volumeThreshold String
    stopLoss        String
    takeProfit      String
    riskPercentage  String
    isActive        Boolean

    userId          String
    user            User?         @relation(fields: [userId], references: [id], name: "user")
    organizationId  String
    organization    Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Trade {

    id             String        @id @default(uuid())
    symbol         String
    entryPrice     String
    exitPrice      String?
    positionSize   String
    type           String
    status         String
    profit         String?
    stopLoss       String
    takeProfit     String

    userId         String
    user           User?         @relation(fields: [userId], references: [id], name: "user")
    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model NotificationSetting {

    id                 String        @id @default(uuid())
    emailEnabled       Boolean
    tradeOpenAlert     Boolean
    tradeCloseAlert    Boolean
    dailyReportEnabled Boolean
    emailAddress       String?

    userId             String
    user               User?         @relation(fields: [userId], references: [id], name: "user")
    organizationId     String
    organization       Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Organization {
    id                   String                @id @default(uuid())
    name                 String
    pictureUrl           String?               @default('https://i.imgur.com/BgkFiid.jpeg')

    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt @default(now())
    roles                OrganizationRole[]

    brokerConnections    BrokerConnection[]    @relation("organization")
    tradingSetups        TradingSetup[]        @relation("organization")
    trades               Trade[]               @relation("organization")
    notificationSettings NotificationSetting[] @relation("organization")

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', roles?[user == auth() && name == 'owner'])
    @@allow('read', roles?[user == auth()])
}

model OrganizationRole {
    id             String       @id @default(uuid())
    name           String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt @default(now())

    userId         String       @default(auth().id)
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', organization.roles?[user == auth() && name == 'owner'])
    @@allow('create', organization.roles?[user == auth()] && name != 'owner')
    @@allow('read', organization.roles?[user == auth()])
    @@allow('delete', auth() == user)
}

model PwaSubscription {
    id        String   @id @default(uuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    userId    String   @default(auth().id)
    user      User     @relation(fields: [userId], references: [id], name: 'user')

    @@allow("all", true)
}

     