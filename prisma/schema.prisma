//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                   String                @id() @default(uuid())
  name                 String?
  email                String?               @unique()
  pictureUrl           String?               @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation      String?
  status               UserStatus            @default(VERIFIED)
  globalRole           String                @default("USER")
  /// @password
  /// @omit
  password             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt()
  organizationRoles    OrganizationRole[]
  pwaSubscriptions     PwaSubscription[]     @relation("user")
  brokerConnections    BrokerConnection[]    @relation("user")
  tradingSetups        TradingSetup[]        @relation("user")
  trades               Trade[]               @relation("user")
  notificationSettings NotificationSetting[] @relation("user")
}

/// @@allow('all', true)
model BrokerConnection {
  id             String        @id() @default(uuid())
  login          String        @default("")
  /// @password
  /// @omit
  password       String?
  server         String        @default("")
  exchangeName   String
  defaultLotSize String
  status         String
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TradingSetup {
  id              String        @id() @default(uuid())
  emaShort        Float
  emaLong         Float
  rsiPeriod       Float
  volumeThreshold String
  stopLoss        String
  takeProfit      String
  riskPercentage  String
  isActive        Boolean
  userId          String
  user            User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId  String
  organization    Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Trade {
  id             String        @id() @default(uuid())
  symbol         String
  entryPrice     String
  exitPrice      String?
  positionSize   String
  type           String
  status         String
  profit         String?
  stopLoss       String
  takeProfit     String
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model NotificationSetting {
  id                 String        @id() @default(uuid())
  emailEnabled       Boolean
  tradeOpenAlert     Boolean
  tradeCloseAlert    Boolean
  dailyReportEnabled Boolean
  emailAddress       String?
  userId             String
  user               User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId     String
  organization       Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id                   String                @id() @default(uuid())
  name                 String
  pictureUrl           String?               @default("https://i.imgur.com/BgkFiid.jpeg")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt()
  roles                OrganizationRole[]
  brokerConnections    BrokerConnection[]    @relation("organization")
  tradingSetups        TradingSetup[]        @relation("organization")
  trades               Trade[]               @relation("organization")
  notificationSettings NotificationSetting[] @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
